<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<qualifiedTypeNameHistroy>
    <fullyQualifiedTypeName name="br.com.coddefy.bookservice.response.Cambio"/>
    <fullyQualifiedTypeName name="org.springframework.beans.factory.annotation.Autowired"/>
    <fullyQualifiedTypeName name="br.com.coddefy.bookservice.proxy.CambioProxy"/>
    <fullyQualifiedTypeName name="org.springframework.web.bind.annotation.ResponseBody"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.netflix.eureka.server.EnableEurekaServer"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.gateway.route.RouteLocator"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.gateway.filter.GlobalFilter"/>
    <fullyQualifiedTypeName name="br.com.coddefy.apigateway.filter.LoggingFilter"/>
    <fullyQualifiedTypeName name="org.springframework.stereotype.Component"/>
    <fullyQualifiedTypeName name="org.springframework.web.bind.annotation.RestController"/>
    <fullyQualifiedTypeName name="org.springframework.web.bind.annotation.RequestMapping"/>
    <fullyQualifiedTypeName name="org.springframework.web.bind.annotation.GetMapping"/>
    <fullyQualifiedTypeName name="org.springframework.web.client.RestTemplate"/>
    <fullyQualifiedTypeName name="org.slf4j.LoggerFactory"/>
    <fullyQualifiedTypeName name="org.slf4j.Logger"/>
    <fullyQualifiedTypeName name="io.github.resilience4j.retry.annotation.Retry"/>
    <fullyQualifiedTypeName name="java.lang.Exception"/>
    <fullyQualifiedTypeName name="io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker"/>
    <fullyQualifiedTypeName name="com.google.common.util.concurrent.RateLimiter"/>
    <fullyQualifiedTypeName name="io.github.resilience4j.ratelimiter.annotation.RateLimiter"/>
    <fullyQualifiedTypeName name="io.github.resilience4j.bulkhead.annotation.Bulkhead"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.annotations.OpenAPIDefinition"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.annotations.info.Info"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.models.info.Info"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.annotations.Operation"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.annotations.OpenAPI30"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.annotations.info.Contact"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.models.OpenAPI"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.annotations.info.License"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.models.info.License"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.models.Components"/>
    <fullyQualifiedTypeName name="io.swagger.v3.oas.annotations.tags.Tag"/>
    <fullyQualifiedTypeName name="antlr.collections.List"/>
    <fullyQualifiedTypeName name="java.util.ArrayList"/>
    <fullyQualifiedTypeName name="org.springdoc.core.properties.SwaggerUiConfigParameters"/>
    <fullyQualifiedTypeName name="java.util.List"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.gateway.route.RouteDefinitionLocator"/>
    <fullyQualifiedTypeName name="org.springdoc.core.models.GroupedOpenApi"/>
    <fullyQualifiedTypeName name="org.springframework.context.annotation.Lazy"/>
    <fullyQualifiedTypeName name="org.springframework.boot.autoconfigure.AutoConfiguration"/>
    <fullyQualifiedTypeName name="org.springframework.boot.actuate.autoconfigure.tracing.MicrometerTracingAutoConfiguration"/>
    <fullyQualifiedTypeName name="zipkin2.internal.Trace"/>
    <fullyQualifiedTypeName name="io.micrometer.tracing.brave.bridge.BraveTracer"/>
    <fullyQualifiedTypeName name="org.springframework.boot.context.properties.EnableConfigurationProperties"/>
    <fullyQualifiedTypeName name="org.springframework.boot.actuate.autoconfigure.tracing.TracingProperties"/>
    <fullyQualifiedTypeName name="org.springframework.boot.actuate.autoconfigure.tracing.ConditionalOnEnabledTracing"/>
    <fullyQualifiedTypeName name="org.springframework.context.annotation.Configuration"/>
    <fullyQualifiedTypeName name="org.springframework.boot.autoconfigure.condition.ConditionalOnClass"/>
    <fullyQualifiedTypeName name="zipkin2.reporter.brave.ZipkinSpanHandler"/>
    <fullyQualifiedTypeName name="org.springframework.context.annotation.Bean"/>
    <fullyQualifiedTypeName name="org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean"/>
    <fullyQualifiedTypeName name="org.springframework.boot.autoconfigure.condition.ConditionalOnBean"/>
    <fullyQualifiedTypeName name="zipkin2.reporter.Reporter"/>
    <fullyQualifiedTypeName name="brave.Span"/>
    <fullyQualifiedTypeName name="zipkin2.Span"/>
    <fullyQualifiedTypeName name="org.springframework.boot.autoconfigure.EnableAutoConfiguration"/>
    <fullyQualifiedTypeName name="org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration"/>
    <fullyQualifiedTypeName name="org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration"/>
    <fullyQualifiedTypeName name="org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration"/>
</qualifiedTypeNameHistroy>
